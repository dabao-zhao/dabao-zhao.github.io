<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on 赵大宝的博客</title>
    <link>https://dabao-zhao.github.io/categories/golang/</link>
    <description>Recent content in Golang on 赵大宝的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 04 Sep 2023 14:14:52 +0800</lastBuildDate><atom:link href="https://dabao-zhao.github.io/categories/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Makefile简明教程</title>
      <link>https://dabao-zhao.github.io/posts/makefile%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/</link>
      <pubDate>Mon, 04 Sep 2023 14:14:52 +0800</pubDate>
      
      <guid>https://dabao-zhao.github.io/posts/makefile%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/</guid>
      <description>变量 变量的命名字可以包含字符、数字，下划线（可以是数字开头），但不应该含有 : 、 # 、 = 或是空字符（空格、回车等），大小写敏感，推荐大驼峰式写法。
赋值 # &amp;lt;variable&amp;gt;; = &amp;lt;value&amp;gt;; # &amp;lt;variable&amp;gt;; := &amp;lt;value&amp;gt;; # &amp;lt;variable&amp;gt;; ?= &amp;lt;value&amp;gt;; k = val # 赋值 k1 := val # := 的赋值下，前面的变量不能使用后面的变量 k2 ?= val # ?= 表示如果 k1 未定义就赋值 val，如果已定义就略过 variable := value variable += more # 值的拼接，结果为 value more，中间是有空格的，:= 可以替换为 = nullstring := space := $(nullstring) # 定义空格 dir := /foo/bar # 注释符 # 不止注释的意思，也可以表示变量的终止，这里 dir 表示 /foo/bar + 四个空格 使用 x = y y = z z = u a := $($($(x))) # 变量的值可以再当成变量 @echo $(a) foo := a.</description>
    </item>
    
    <item>
      <title>Go 有用的工具</title>
      <link>https://dabao-zhao.github.io/posts/go%E6%9C%89%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Wed, 23 Aug 2023 09:46:17 +0800</pubDate>
      
      <guid>https://dabao-zhao.github.io/posts/go%E6%9C%89%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7/</guid>
      <description> 工具 功能 richgo 用文本装饰丰富 go test 的输出 rts 根据服务器的响应生成 Go 结构体 golines 格式化 Go 代码中的长行为短行 goimports 自动格式化 Go 代码并对所有引入的包进行管理，包括自动增删依赖的包、将依赖包按字母序排序并分类 gomock 接口 Mock 工具 mockery 接口 Mock 工具 gotests 根据 Go 代码自动生成单元测试模板 go-junit-report 将 go test 的输出转化为 junit xml golangci-lint 静态代码检查工具 protoc-go-inject-tag 向通过 protoc 工具生成的 pb.go 文件中注入自定义标签 db2struct 将数据库表一键转换为 go struct，支持自定义 tag 和多种命名格式配置 gsemver 根据 git commit 规范自动生成语义化版本 git-chglog 根据 git commit 自动生成 CHANGELOG github-release 命令行工具，用来创建、修改 github release go-mod-outdated 表格形式展示依赖包是否有更新 depth 通过分析导入的库，将某个包的依赖关系用树状结构显示出来 go-callvis 可视化显示 Go 调用关系 addlicense 通过扫描指定的文件，来确保源码文件有版权头 go-swagger 自动生成 Go Swagger 文档 </description>
    </item>
    
    <item>
      <title>Linux 下安装和升级 Go</title>
      <link>https://dabao-zhao.github.io/posts/linux%E4%B8%8B%E5%AE%89%E8%A3%85%E5%92%8C%E5%8D%87%E7%BA%A7go/</link>
      <pubDate>Tue, 08 Aug 2023 09:56:13 +0800</pubDate>
      
      <guid>https://dabao-zhao.github.io/posts/linux%E4%B8%8B%E5%AE%89%E8%A3%85%E5%92%8C%E5%8D%87%E7%BA%A7go/</guid>
      <description>安装 wget https://golang.google.cn/dl/go1.20.7.linux-amd64.tar.gz rm -rf /usr/local/go tar -C /usr/local -xzf go1.20.7.linux-amd64.tar.gz 打开 ~/.bashrc 并输入
export GOROOT=/usr/local/go export GOPATH=$HOME/gowork export GOBIN=$GOPATH/bin export PATH=$GOPATH:$GOBIN:$GOROOT/bin:$PATH 保存并关闭文件，输入以下命令以使更改生效
source ~/.bashrc 升级 操作与安装一致</description>
    </item>
    
  </channel>
</rss>
